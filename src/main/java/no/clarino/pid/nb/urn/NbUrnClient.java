package no.clarino.pid.nb.urn;

import no.clarino.pid.nb.urn.wsdl.*;
import org.yaml.snakeyaml.Yaml;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Map;

/**
 * Created by rkn083 on 19.05.14.
 */
public class NbUrnClient {
    private Map <String, String> config;
    // private IdService client;
    private IdTestService client;
    //private IdMockService client;
    private String ssoToken;

    public NbUrnClient(String config) throws NbUrnException {
        Yaml yaml = new Yaml();
        this.config = loadConfig(config);
        // this.client = new IdService_Service().getPort(IdService.class);
        this.client = new IdTestService_Service().getPort(IdTestService.class);
        //this.client = new IdMockService_Service().getPort(IdMockService.class);
    }

    public NbUrnClient(String config, String username, String password) throws NbUrnException {
        this(config);
        this.config.put("username", username);
        this.config.put("password", password);
    }

    public Map<String, String> getConfig() {
        return config;
    }

    public void setConfig(Map<String, String> config) {
        this.config = config;
    }

    public String getSsoToken() {
        return ssoToken;
    }

    public void setSsoToken(String ssoToken) {
        this.ssoToken = ssoToken;
    }

    /**
     * Loads a configuration file (YAML) containing the neccessary parameters for connecting to the NB PID service.
     * @param filename the filename containing the YAML data.
     * @return a Map as generated by SnakeYAML
     * @throws NbUrnException
     */
    private Map loadConfig(String filename) throws NbUrnException {
        File f = new File(filename);
        try {
            FileInputStream fileInputStream = new FileInputStream(f);
            Yaml yaml = new Yaml();
            Map m = (Map <String, String>) ((Map) ((Map) yaml.load(fileInputStream)).get("config")).get("urn");
            return m;
        } catch (FileNotFoundException e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Find a registered URN with all corresponding locations, along with
     * other registered information regarding the URN.
     * @param urn the URN to search for
     * @return a {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo} object
     * @throws NbUrnException
     */
    public URNInfo findURN(String urn) throws NbUrnException {
        try {
            return this.client.findURN(urn);
        } catch (URNNotFoundException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURNException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Search for URN(s) pointing to the specified URL.
     * @param url the URL to search for
     * @return a {@link no.clarino.pid.nb.urn.wsdl.URNList} object
     * @throws NbUrnException
     */
    public URNList findURNsForURL(String url) throws NbUrnException {
        try {
            return this.client.findURNsForURL(url);
        } catch (MalformedURLException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Add a new URL that is to be associated with the specified URN.
     * @param urn the URN to associate the new target to
     * @param url the URL pointing to the target
     * @return a {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo} object reflecting the changes to the URN
     * @throws NbUrnException
     */
    public URNInfo addUrl(String urn, String url) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.addURL(this.ssoToken, urn, url);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (InvalidURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (ObjectAlreadyExistsException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNNotFoundException_Exception e) {
            e.printStackTrace();
        } catch (MalformedURNException_Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Create a new URN under the specified series/prefix.
     * NB: This will only work if:
     *     - the ID service supports assignment of serial numbers for the specified series, and
     *     - if the user has access to this series.
     * The created URN is stored in the ID service.
     *
     * @param seriesCode the series code / prefix under which to create a new URN
     * @param url the URL pointing to the target of the URN
     * @return the created {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo}
     * @throws NbUrnException
     */
    public URNInfo createUrn(String seriesCode, String url) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.createURN(this.ssoToken, seriesCode, url);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (InvalidURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (ObjectAlreadyExistsException_Exception e) {
            throw new NbUrnException(e);
        } catch (IllegalActionException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNSeriesNotFoundException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Delete a URL pointing to a target associated with the given URN.
     * This operation is only allowed as long as there is more than one registered target for the specified URN.
     * @param urn the URN associated with the URL to delete
     * @param url the URL to delete
     * @return a {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo} object reflecting the changes to the URN
     * @throws NbUrnException
     */
    public URNInfo deleteUrl(String urn, String url) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.deleteURL(this.ssoToken, urn, url);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (URLNotFoundException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNNotFoundException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (TooFewURLsException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURNException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Request the next available URN from a series/prefix.
     * NB: This will only work if:
     *     - the ID service supports assignment of serial numbers for the specified series, and
     *     - if the user has access to this series.
     * The returned URN is not stored in the ID service.
     * @param seriesCode a string containing the series code / prefix
     * @return a String containing the next available URN.
     * @throws NbUrnException
     */
    public String getNextUrn(String seriesCode) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.getNextURN(this.ssoToken, seriesCode);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (IllegalActionException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNSeriesNotFoundException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Logs in the client using credentials from the config file.
     * The returned SSOToken is stored in this class and used for every API call that requires it,
     * until {@link NbUrnClient#logout() logout()} is called.
     * @return the received SSOToken
     * @throws NbUrnException
     */
    public String login() throws NbUrnException {
        try {
            this.ssoToken = this.client.login(this.config.get("username"), this.config.get("password"));
            return this.ssoToken;
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Logs in the client using credentials supplied in the arguments
     * The returned SSOToken is stored in this class and used for every API call that requires it,
     * until {@link NbUrnClient#logout() logout()} is called.
     * @param username a valid username
     * @param password a valid password
     * @return the received SSOToken
     * @throws NbUrnException
     */
    public String login(String username, String password) throws NbUrnException {
        try {
            this.ssoToken = this.client.login(username, password);
            return this.ssoToken;
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Logs out the client, invalidating the current SSOToken.
     */
    public void logout() {
        if (this.ssoToken != null) {
            this.client.logout(this.ssoToken);
            this.ssoToken = null;
        }
    }

    /**
     * Register a new URN and attach it to a target pointed to by the URL.
     * @param urn the URN to register
     * @param url the URL pointing to the target of the URN
     * @return the registered {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo}
     * @throws NbUrnException
     */
    public URNInfo registerUrn(String urn, String url) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.registerURN(this.ssoToken, urn, url);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (IllegalActionException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (InvalidURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURNException_Exception e) {
            throw new NbUrnException(e);
        } catch (ObjectAlreadyExistsException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNSeriesNotFoundException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Replace the location of an existing target identified with the specified URN.
     * @param urn The URN whose target to replace
     * @param oldUrl The old URL to be replaced
     * @param newUrl The new URL to replace the old URL with
     * @return a {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo} object reflecting the changes to the URN
     * @throws NbUrnException
     */
    public URNInfo replaceUrl(String urn, String oldUrl, String newUrl) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.replaceURL(this.ssoToken, urn, oldUrl, newUrl);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (InvalidURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURNException_Exception e) {
            throw new NbUrnException(e);
        } catch (ObjectAlreadyExistsException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNNotFoundException_Exception e) {
            throw new NbUrnException(e);
        } catch (URLNotFoundException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Create a new URN under the specified series/prefix and reserve it for future use.
     * NB: This will only work if:
     *     - the ID service supports assignment of serial numbers for the specified series, and
     *     - if the user has access to this series.
     * The created URN is stored in the ID service, but is not attached to any locations.
     * @param seriesCode the series code / prefix under which to reserve a new URN
     * @return the reserved {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo}
     * @throws NbUrnException
     */
    public URNInfo reserveNextUrn(String seriesCode) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.reserveNextURN(this.ssoToken, seriesCode);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (IllegalActionException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNSeriesNotFoundException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURNSeriesCodeException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Reserve a URN for future use, without assigning any targets.
     * The URN is stored in the ID service without any associated targets.
     * This is only allowed for URNs belonging to a series without serial numbers.
     * @param urn the URN to reserve
     * @return the reserved {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo}
     * @throws NbUrnException
     */
    public URNInfo reserveUrn(String urn) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.reserveURN(this.ssoToken, urn);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURNException_Exception e) {
            throw new NbUrnException(e);
        } catch (ObjectAlreadyExistsException_Exception e) {
            throw new NbUrnException(e);
        } catch (IllegalActionException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNSeriesNotFoundException_Exception e) {
            throw new NbUrnException(e);
        }
    }

    /**
     * Set a default URL for a URN.
     * The specified URL must be one that is already registered for the URN.
     * @param urn the URN to set a default URL for
     * @param url the default URL to set for the URN
     * @return a {@link no.clarino.pid.nb.urn.wsdl.URNInfo URNInfo} object reflecting the changes to the URN
     * @throws NbUrnException
     */
    public URNInfo setDefaultUrl(String urn, String url) throws NbUrnException {
        if (this.ssoToken == null) { throw new SsoTokenException("You need to be logged in for this call."); }
        try {
            return this.client.setDefaultURL(this.ssoToken, urn, url);
        } catch (FailedLoginException_Exception e) {
            throw new NbUrnException(e);
        } catch (InsufficientRightsException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURNException_Exception e) {
            throw new NbUrnException(e);
        } catch (URNNotFoundException_Exception e) {
            throw new NbUrnException(e);
        } catch (MalformedURLException_Exception e) {
            throw new NbUrnException(e);
        } catch (URLNotFoundException_Exception e) {
            throw new NbUrnException(e);
        }
    }

}
